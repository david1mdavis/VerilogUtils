#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "test.y".
#

require 'racc/parser'


# $Id: calc-ja.y 2112 2005-11-20 13:29:32Z aamine $
require '../module.rb'

class VeriParser < Racc::Parser

module_eval <<'..end test.y modeval..id65f92d9393', 'test.y', 26
  
  def initialize
    @module = Module.new
  end

  def evaluate(str)
        require 'pp'
    @tokens = []
    pp str
    until str.empty?
      case str
      when /\A\s+/
        ;
      when /\A\s*module/
        @tokens.push [:MODULE, 0]

      when /\A\s*endmodule/
        @tokens.push [:ENDMODULE, 0]

      when /\A\s*\W/
        @tokens.push [$&, $&]

      when /\A\s*input/
        @tokens.push [:INPUT]

      when /\A\s*output/
        @tokens.push [:OUTPUT, 0]

      when /\A\s*reg/
        @tokens.push [:REG, 0]

      when /\A\s*wire/
        @tokens.push [:WIRE, 0]

      when /\A\s*\[(\d+:\d+)\]/
        @tokens.push [:PORT, [$1.to_i, $2.to_i]]

      when /\A\s*\w+/
        @tokens.push [:NAME, $&]

      when /\A\d+/
        @tokens.push [:NUMBER, $&.to_i]

      when /\A.|\n/
        s = $&
        @tokens.push [s, s]
      end
      str = $'
    end
    @tokens.push [false, '$']
    do_parse
  end

  def next_token
    @tokens.shift
  end

..end test.y modeval..id65f92d9393

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 0, 22, :_reduce_1,
 9, 19, :_reduce_none,
 2, 19, :_reduce_3,
 1, 19, :_reduce_4,
 3, 21, :_reduce_5,
 3, 21, :_reduce_none,
 4, 21, :_reduce_none,
 0, 20, :_reduce_none ]

racc_reduce_n = 9

racc_shift_n = 25

racc_action_table = [
     3,    15,     8,     6,     9,    10,    11,     1,    12,     2,
    13,    14,     7,    16,    17,    18,    19,    20,    22,    24 ]

racc_action_check = [
     0,     9,     2,     0,     2,     3,     4,     0,     6,     0,
     7,     8,     1,    10,    11,    15,    16,    19,    21,    23 ]

racc_action_pointer = [
    -7,    -3,   -13,    -3,     6,   nil,    -5,     2,     3,   -14,
     4,    14,   nil,   nil,   nil,     7,     6,   nil,   nil,     6,
   nil,     6,   nil,     9,   nil ]

racc_action_default = [
    -9,    -9,    -9,    -9,    -9,    -4,    -9,    -9,    -9,    -9,
    -9,    -9,    -3,    -5,    -6,    -9,    -9,    25,    -7,    -9,
    -8,    -9,    -1,    -9,    -2 ]

racc_goto_table = [
     4,    21,     5,    23 ]

racc_goto_check = [
     1,     2,     3,     4 ]

racc_goto_pointer = [
   nil,     0,   -19,     2,   -19 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :UMINUS => 2,
 "*" => 3,
 "/" => 4,
 "+" => 5,
 "-" => 6,
 :MODULE => 7,
 :NAME => 8,
 "(" => 9,
 :args => 10,
 ")" => 11,
 :ENDMODULE => 12,
 "," => 13,
 :INPUT => 14,
 :PORT => 15,
 :OUTPUT => 16,
 :REG => 17 }

racc_use_result_var = false

racc_nt_base = 18

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'UMINUS',
'"*"',
'"/"',
'"+"',
'"-"',
'MODULE',
'NAME',
'"("',
'args',
'")"',
'ENDMODULE',
'","',
'INPUT',
'PORT',
'OUTPUT',
'REG',
'$start',
'module',
'contents',
'arg',
'@1']

Racc_debug_parser = true

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'test.y', 9
  def _reduce_1( val, _values)
return 0
  end
.,.,

 # reduce 2 omitted

module_eval <<'.,.,', 'test.y', 11
  def _reduce_3( val, _values)
return 0
  end
.,.,

module_eval <<'.,.,', 'test.y', 12
  def _reduce_4( val, _values)
return 0
  end
.,.,

module_eval <<'.,.,', 'test.y', 14
  def _reduce_5( val, _values)
@module.inputs << Variable.new(val[0], val[1], val[2]); return 0
  end
.,.,

 # reduce 6 omitted

 # reduce 7 omitted

 # reduce 8 omitted

 def _reduce_none( val, _values)
  val[0]
 end

end   # class VeriParser
